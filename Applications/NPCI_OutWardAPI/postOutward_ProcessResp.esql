

PATH com.npci.encdec;
CREATE COMPUTE MODULE postOutward_ProcessResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		

--		
--		
--		SET Environment.id = 'XXXorcRE865QOprcv2OuhKLlBldvLiBUJDv';  
--      SET Environment.Variable.cacheURLs = SUBSTRING(Environment.id FROM 4 FOR 4);
--	  SET OutputLocalEnvironment.Destination.HTTP.RequestURL = cacheRef ||'.'|| Environment.Variable.cacheURLs;

		
		DECLARE inFIXMLRef          REFERENCE TO InputRoot.XMLNSC;
		DECLARE inRespHdrRef        REFERENCE TO inFIXMLRef.*:Header.*:ResponseHeader;
		DECLARE InBodyResRef        REFERENCE TO inFIXMLRef.*:Body.*:executeFinacleScriptResponse.*:executeFinacleScript_CustomData;
		DECLARE inBodyRef           REFERENCE TO inFIXMLRef.*:Body;
		DECLARE envRef              REFERENCE TO Environment.Variables;
				
		CREATE FIELD OutputRoot.JSON.Data.response;
		DECLARE outRespRef , outErrorRef, outBodyResRef, cifDetailsRef, accountDetailsRef, outItemRef, outCifDtlsRef  REFERENCE TO OutputRoot.JSON.Data.response;
		CALL JsonHeader(inRespHdrRef , outRespRef , envRef); 
		
		CREATE LASTCHILD OF outRespRef.body AS outBodyResRef NAME 'npcioutwardResponse';
		
		SET  outBodyResRef.api=InputRoot.XMLNSC.ns2:Ack.(XMLNSC.Attribute)api;
		SET outBodyResRef.txnid =Environment.Variables.txnid;
--		SET outBodyResRef.ts =InputRoot.XMLNSC.ns2:*.Ack.(XMLNSC.Attribute)ts;
--		SET outBodyResRef.err =InputRoot.XMLNSC.ns2:*.Ack.(XMLNSC.Attribute)err;
		
		SET outBodyResRef.ts =InputRoot.XMLNSC.ns2:Ack.(XMLNSC.Attribute)ts;
     	SET outBodyResRef.err =InputRoot.XMLNSC.ns2:Ack.(XMLNSC.Attribute)err;
     	SET outBodyResRef.errcode =InputRoot.XMLNSC.ns2:Ack.errorMessages.errorCd;
        SET outBodyResRef.errmsg =InputRoot.XMLNSC.ns2:Ack.errorMessages.errorDtl;
		

			
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
--CREATE FUNCTION verifyxmlsign(IN payload CHAR) RETURNS CHAR LANGUAGE JAVA EXTERNAL NAME "CipherUtils1.verifySign";

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
CREATE PROCEDURE JsonHeader(IN inRespHdrRef REFERENCE, INOUT outRespRef REFERENCE , IN envRef  REFERENCE) BEGIN
			DECLARE outHdrRef REFERENCE TO outRespRef;  
			CREATE LASTCHILD OF outRespRef AS outHdrRef NAME 'header';   
				SET outHdrRef.requestUUID 	=  COALESCE(envRef.RequestUUID,'');
				SET outHdrRef.channelId 	= COALESCE(envRef.ChannelId,'');
				--SET outHdrRef.status 		=  LOWER(inRespHdrRef.*:HostTransaction.*:Status); 
		END; 
